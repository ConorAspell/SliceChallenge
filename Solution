import numpy as np, random, operator, pandas as pd, matplotlib.pyplot as plt
from pickle import FALSE
class City:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def distance(self, city):
        xDis = abs(self.x - city.x)
        yDis = abs(self.y - city.y)
        distance = np.sqrt((xDis ** 2) + (yDis ** 2))
        return distance
    
    def __repr__(self):
        return "(" + str(self.x) + "," + str(self.y) + ")"

class Fitness:
    def __init__(self, route):
        self.route = route
        self.distance = 0
        self.fitness= 0.0
    
    def routeDistance(self):
        if self.distance ==0:
            pathDistance = 0
            for i in range(0, len(self.route)):
                fromCity = self.route[i]
                toCity = None
                if i + 1 < len(self.route):
                    toCity = self.route[i + 1]
                else:
                    toCity = self.route[0]
                pathDistance += fromCity.distance(toCity)
            self.distance = pathDistance
        return self.distance
    
    def routeFitness(self):
        if self.fitness == 0:
            self.fitness = 1 / float(self.routeDistance())
        return self.fitness

def createRoute(cityList):
    route = random.sample(cityList, len(cityList))
    return route
    
def initialPopulation(popSize, cityList):
    population = []

    for i in range(0, popSize):
        population.append(createRoute(cityList))
    return population

def rankRoutes(population):
    fitnessResults = {}
    for i in range(0,len(population)):
        fitnessResults[i] = Fitness(population[i]).routeFitness()
    return sorted(fitnessResults.items(), key = operator.itemgetter(1), reverse = True)

        
def selection(popRanked, eliteSize):
    selectionResults = []
    df = pd.DataFrame(np.array(popRanked), columns=["Index","Fitness"])
    df['cum_sum'] = df.Fitness.cumsum()
    df['cum_perc'] = 100*df.cum_sum/df.Fitness.sum()
    
    for i in range(0, eliteSize):
        selectionResults.append(popRanked[i][0])
    for i in range(0, len(popRanked) - eliteSize):
        pick = 100*random.random()
        for i in range(0, len(popRanked)):
            if pick <= df.iat[i,3]:
                selectionResults.append(popRanked[i][0])
                break
    return selectionResults

def matingPool(population, selectionResults):
    matingpool = []
    for i in range(0, len(selectionResults)):
        index = selectionResults[i]
        matingpool.append(population[index])
    return matingpool
    
def breed(parent1, parent2):
    child = []
    childP1 = []
    childP2 = []
    
    geneA = int(random.random() * len(parent1))
    geneB = int(random.random() * len(parent1))
    
    startGene = min(geneA, geneB)
    endGene = max(geneA, geneB)

    for i in range(startGene, endGene):
        childP1.append(parent1[i])
        
    childP2 = [item for item in parent2 if item not in childP1]

    child = childP1 + childP2
    return child
    
def breedPopulation(matingpool, eliteSize):
    children = []
    length = len(matingpool) - eliteSize
    pool = random.sample(matingpool, len(matingpool))

    for i in range(0,eliteSize):
        children.append(matingpool[i])
    
    for i in range(0, length):
        child = breed(pool[i], pool[len(matingpool)-i-1])
        children.append(child)
    return children

def mutate(individual, mutationRate):
    for swapped in range(len(individual)):
        if(random.random() < mutationRate):
            swapWith = int(random.random() * len(individual))
            
            city1 = individual[swapped]
            city2 = individual[swapWith]
            
            individual[swapped] = city2
            individual[swapWith] = city1
    return individual

def mutatePopulation(population, mutationRate):
    mutatedPop = []
    
    for ind in range(0, len(population)):
        mutatedInd = mutate(population[ind], mutationRate)
        mutatedPop.append(mutatedInd)
    return mutatedPop


def nextGeneration(currentGen, eliteSize, mutationRate):
    popRanked = rankRoutes(currentGen)
    selectionResults = selection(popRanked, eliteSize)
    matingpool = matingPool(currentGen, selectionResults)
    children = breedPopulation(matingpool, eliteSize)
    nextGeneration = mutatePopulation(children, mutationRate)
    return nextGeneration

def geneticAlgorithm(population, popSize, eliteSize, mutationRate, generations):
    pop = initialPopulation(popSize, population)
    print("Initial List of Cities:")
    print(population)
    #print("Distance Before Optimisation: " + str(1 / rankRoutes(pop)[0][1]))
    
    for i in range(0, generations):
        pop = nextGeneration(pop, eliteSize, mutationRate)
    
    #print("Distance after Optimisation: " + str(1 / rankRoutes(pop)[0][1]))
    bestRouteIndex = rankRoutes(pop)[0][0]
    bestRoute = pop[bestRouteIndex]
    #print(bestRoute)
    return bestRoute

def check(num):
    if num< "0" or num > "9":
        print("Incorrect Input")
        print("Make sure the Input is in the format \"5x5 (1, 3) (4, 4) (4, 2) (4, 2) (0, 1) (3, 2) (2, 3) (4, 1)\" ")
        exit(0)
    else:
        return

def generateCityList():
    cityList = []
    num = input("Enter Input: ")
    if(num == ""):
        print("Empty Input")
        print("Program terminated")
        exit(0)
    check(num[0])
    check(num[2])
    max_x = int(num[0])
    max_y = int(num[2])
    x=0
    y=0
    for i in range(5, len(num), 7):
        if i+3 > len(num):
            break
        check(num[i])
        check(num[i+3])
        x=int(num[i])
        y=int(num[i+3])
        if x > max_x:
            print("X value is out of bounds")
            print("Program terminated")
            exit(0)
        if y > max_y:
            print("Y value is out of bounds")
            print("Program terminated")
            exit(0)
        cityList.append(City(x=int(num[i]), y=int(num[i+3])))
    if checkOrigin(cityList) == False:
        cityList.insert(0,City(0, 0))
    return cityList

def checkOrigin(best_route):
    for item in best_route:
        if item.x == 0 and item.y == 0:
            return True
    return False

def shiftLeft(best_route):
    j = 0
    index = 0
    route = []
    jump = 0
    for item in best_route:
        if item.x == 0 and item.y == 0:
            index = j
            break
        else:
            j+=1
    if index == 0:
        return best_route
    if index == len(best_route)-1:
        return best_route.reverse()
    else:
        for i in range(0, len(best_route)):
            jump = (i+index)%(len(best_route))
            route.append(best_route[jump])
    return route        

def printInstructions(best_route):
    string = ""
    for i in range(0, len(best_route)-1):
        x1 = best_route[i].x
        x2 = best_route[i+1].x
        y1 = best_route[i].y
        y2 = best_route[i+1].y
        if(x1 > x2):
            for i in range(0, x1-x2):
                string+="E "
        else:
            for i in range(0, x2-x1):
                string+= "W "
        if(y1 > y2):
            for i in range(0, y1-y2):
                string+="S "
        else:
            for i in range(0, y2-y1):
                string+="N "
        string+="D "
    print(string)

cityList = generateCityList()
best_route = geneticAlgorithm(population=cityList, popSize=10, eliteSize=2, mutationRate=0.02, generations=100)
best_route = shiftLeft(best_route)
print("Optimised List of Locations")
print(best_route)
print("Final Instructions: ")
printInstructions(best_route)
